String Link : = mongodb+srv://LalitaMahule:lali123456789@cluster0.ypjvt.mongodb.net/LalitaMahule

mongodb+srv://LalitaMahule:lali123456789@cluster0.ypjvt.mongodb.net/LalitaMahule?retryWrites=true&w=majority

Password : lali123456789

token :eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MmE4NzAzMDdjZjAzMDJmZjZmMzZiYWQiLCJiYXRjaCI6IlJhZG9uIiwib3JnYW5pemF0aW9uIjoiRnVuY3Rpb25VcCIsImlhdCI6MTY1NTIwNzY5OX0.8nbFhhG7h4yKb1D4ZVWPeXfiWPx-3h8lUveiTNMPyJY


// let allBooks= await bookModel.find(  ).count() //count all get data list
    // let allBooks= await bookModel.find( {authorName: "Lamar Odam", isPublished: true, id: 0  } )
      // let allBooks= await bookModel.find({ $or: [  { authorName: "Lamar Odam" }, {isPublished: true,}, { year: 2000}
    //] }).select({bookName: 1, authorName: 1, _id: 0 })    // SELECT keys that we want    

    // let allBooks= await bookModel.find().sort({sales: 1})  :-------Sorting Acending order (1) to decending order



    // PAGINATION 
    // let page = req.query.page
    // // let allBooks= await bookModel.find().skip(2 * (page-1)).limit(2)

    // let allBooks= await bookModel.find().sort({sales: -1}).skip(2 * (page-1)).limit(2).select({bookName: 1, authorName: 1, _id : 0})

   // let allBooks= await bookModel.find({ sales: { $eq:  200 }  }) 
    // let allBooks= await bookModel.find({ sales: { $ne:  137 }  }) 
    // let allBooks= await bookModel.find({ sales: { $gt:  50 }  }) 
    // let allBooks= await bookModel.find({ sales: { $lt:  50 }  }) 
    // let allBooks= await bookModel.find({ sales: { $lte:  50 }  }) 
    // let allBooks= await bookModel.find({ sales: { $gte:  50 }  }) 



     
    // let allBooks= await bookModel.find({     sales : { $in: [10, 17, 82] }     }).count() 
    // sales : { $in: [10, 17, 82] }
    
    // let allBooks= await bookModel.find({     sales : { $nin: [ 17, 82, 137] }     }).select({ sales: 1, _id:0})
    
    //  let allBooks= await bookModel.find({     $and: [{sales : {$gt: 20}} , [sales:  {$lt: 100}]]    })  //sales is between 20 and 100.... sales > 20 AND sales <100
    //  let allBooks= await bookModel.find({     sales : {$gt: 20, $lt: 100}   })  //sales is between 20 and 100.... sales > 20 AND sales <100


    //  let allBooks= await bookModel.findById("621c60a6b16c9e6bf2736e33") 
    //  let allBooks= await bookModel.findOne( {sales: 10}) 
    //  let allBooks= await bookModel.find( {sales: 10}) 
    
    

    // //  update (not covered: - findByIdAndUpdate | updateOne )
    // let allBooks= await bookModel.update(   
    //     {  sales: {$gt: 10}  }, //condition
    //     { $set: { isPublished: true} } // the change that you want to make
    //     ) 



    // REGEX
    // let allBooks= await bookModel.find( { bookName:  /^Int/  }) 
    // let allBooks= await bookModel.find( { bookName:  /^INT/i  }) 
    // let allBooks= await bookModel.find( { bookName:  /5$/  }) 
    // let allBooks= await bookModel.find( { bookName:  /.*Programming.*/i  }) 
    
    // ASYNC AWAIT
    
    // let a= 2+4
    // a= a + 10
    // console.log(a)
    // let allBooks= await bookModel.find( )  //normally this is an asynchronous call..but await makes it synchronous


    // WHEN AWAIT IS USED: - database + axios
    //  AWAIT can not be used inside forEach , map and many of the array functions..BE CAREFUL
//     console.log(allBooks)
//     let b = 14
//     b= b+ 10
//     console.log(b)
  


  const authenticate = function(req, req, next) {
//     //check the token in request header
//     let token = req.headers["x-auth-token"];
//     if(!token) return res.send({status:false, msg:"token must be preset"});
//     let decodetoken = jwt.verify(token, "Function-Up radon");
//     if(!decodetoken) return res.send({status: false, msg:"your decode token is invalid"});

// //     //validate this token

//    next()
//  }

const authorise = function(req, res, next) {
//   // comapre the logged in user's id and the id in request
//   let token = req.headers["x-auth-token"]
//   if(!token) return res.send({status: false, msg: "token must be present in the request header"})
//   let decodedToken = jwt.verify(token, 'Function-Up radon')
//   if(!decodedToken) return res.send({status: false, msg:"token is not valid"})
  let userToBeModified = req.params.userId
  let userLoggedIn = decodedToken.userId
  if(userToBeModified != userLoggedIn) return res.send({status: false, msg: 'User logged is not allowed to modify the requested users data'})
  
     next()
 }




 // Check if the token is present
  // Check if the token present is a valid token
  // Return a different error message in both these cases
  let token = req.headers["x-auth-token"]
  if(!token) return res.send({status: false, msg: "token must be present in the request header"})
  let decodedToken = jwt.verify(token, 'Function-Up radon')

  if(!decodedToken) return res.send({status: false, msg:"token is not valid"})
  
  //userId for which the request is made. In this case message to be posted.
  let userToBeModified = req.params.userId
  //userId for the logged-in user
  let userLoggedIn = decodedToken.userId

  //userId comparision to check if the logged-in user is requesting for their own data
  if(userToBeModified != userLoggedIn) return res.send({status: false, msg: 'User logged is not allowed to modify the requested users data'})